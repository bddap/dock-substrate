- hosts: '{{ host }}'
  vars:
    node_nm: "--name={{ node_name | default('') }}"
    image_tag: "{{ docker_image_tag | default('rpoa-test') }}"
    container_name: "{{ docker_container_name | default('poa-1-node') }}"
    mount_at: "{{ mount_container_at | default('/docknode') }}" # Mount docker volume at
    base_path: "--base-path={{ node_base_path if node_base_path is defined else mount_at}}" # Base path for Substrate node
    chain: "--chain=./cspec/{{ chain_spec_file | default('poa_testnet_raw.json') }}"
    
    # When `libp2p_key` is not provided `--node-key=...` parameter is not passed to the node making it generate a random key
    # Expecting a 32 byte hex string without leading `0x`. No input validation done
    # As the node key is passed as command line argument, it can be learned through bash history. 
    # TODO: Ansible should disable history before running script and enable once done.
    has_node_key: "{{ libp2p_key | default(false) }}"  # libp2p_key might not be defined
    node_key_cmd: "{{ '--node-key='+ libp2p_key if (has_node_key) else '' }}"

    ext_rpc_flag: "{{ allow_ext_rpc | default('false') | bool }}"  # External RPC is disabled by default
    external_rpc: "{{ '--rpc-external --ws-external --rpc-cors=all' if (ext_rpc_flag) else '' }}"

    new_session_key: "{{ rotate_session_key | default('false') | bool }}"
    
    is_val_flag: "{{ is_validator | default('false') | bool }}"  # Is validator node or not
    validator: "{{ '--validator' if (is_val_flag) else '' }}"

    # This flag should be only applicable and required for sentry nodes. Its the caller's responsibility to pass it
    # when needed.
    sentry: "{{ '--sentry=' + sentry_of if sentry_of is defined else '' }}"

    telemetry: "{{ '--telemetry-url='+telemetry_url if telemetry_url is defined else '--no-telemetry' }}"
    
    only_reserved: "{{ '--reserved-only' if (reserved_only | bool) else '' }}"  # Variable name `only_reserved` is intentionally kept different from `reserved_only` to avoid recursion 
    
    # if `reserved-nodes` is defined, then `nodes_reserved` will be a string like `--reserved-nodes=<addr1> --reserved-nodes=<addr2>`. `reserved-nodes` is expected to as an array and no input validation is done as of now
    # Variable name `nodes_reserved` is intentionally kept different from `reserved_nodes` to avoid recursion
    nodes_reserved: "{{ '--reserved-nodes=' + reserved_nodes | join(' --reserved-nodes=') if reserved_nodes is defined else '' }}"
    
    # if `bootnodes` is defined, then `boot_nodes` will be a string like `--bootnodes=<addr1> --bootnodes=<addr2>`. `bootnodes` is expected to as an array and no input validation is done as of now
    # Variable name `boot_nodes` is intentionally kept different from `bootnodes` to avoid recursion
    boot_nodes: "{{ '--bootnodes=' + bootnodes | join(' --bootnodes=') if bootnodes is defined else '' }}"
    # TODO: Allow light node as well
  tasks:

  - fail:
      msg: Validators cannot allow external RPC
    when: is_val_flag | bool and ext_rpc_flag | bool

  - name: Install required system packages (Will only run for Ubuntu/Debian)
    when: ansible_facts['os_family'] == "Debian"
    become: yes
    become_method: sudo
    apt: name={{ item }} state=latest update_cache=yes
    loop: [ 'apt-transport-https', 'ca-certificates', 'curl', 'software-properties-common', 'python3-pip', 'virtualenv', 'python3-setuptools']
 
  - name: Add Docker GPG apt Key (Will only run for Ubuntu/Debian)
    when: ansible_facts['os_family'] == "Debian"
    become: yes
    become_method: sudo
    apt_key:
      url: https://download.docker.com/linux/ubuntu/gpg
      state: present
    
  - name: Add Docker Repository (Will only run for Ubuntu/Debian)
    when: ansible_facts['os_family'] == "Debian"
    become: yes
    become_method: sudo
    apt_repository:
      repo: deb https://download.docker.com/linux/ubuntu bionic stable
      state: present

  - name: Update apt and install docker-ce (Will only run for Ubuntu/Debian)
    when: ansible_facts['os_family'] == "Debian"
    become: yes
    become_method: sudo
    apt: update_cache=yes name=docker-ce state=latest
  
  # Following commented are for RedHat. Haven't tested yet.
  # - name: Install yum utils (Will only run for RedHat/Centos)
  #   when: ansible_facts['os_family'] == "RedHat"
  #   yum:
  #     name: yum-utils
  #     state: latest
  
  # - name: Install device-mapper-persistent-data (Will only run for RedHat/Centos)
  #   when: ansible_facts['os_family'] == "RedHat"
  #   yum:
  #     name: device-mapper-persistent-data
  #     state: latest

  # - name: Install lvm2 (Will only run for RedHat/Centos)
  #   when: ansible_facts['os_family'] == "RedHat"
  #   yum:
  #     name: lvm2
  #     state: latest

  # - name: Add Docker repo (Will only run for RedHat/Centos)
  #   when: ansible_facts['os_family'] == "RedHat"
  #   get_url:
  #     url: https://download.docker.com/linux/centos/docker-ce.repo
  #     dest: /etc/yum.repos.d/docer-ce.repo
  #   become: yes
  
  # - name: Install Docker (Will only run for RedHat/Centos)
  #   when: ansible_facts['os_family'] == "RedHat"
  #   package:
  #     name: docker-ce
  #     state: latest
  #   become: yes

  # - name: Start Docker service (Will only run for RedHat/Centos)
  #   when: ansible_facts['os_family'] == "RedHat"
  #   service:
  #     name: docker
  #     state: started
  #     enabled: yes
  #   become: yes

  - name: Add group "docker", ignore if exists
    become: yes
    become_method: sudo
    group:
      name: docker
      state: present

  - name: Add current user to group "docker", ignore if exists
    become: yes
    become_method: sudo
    user:
      name: "{{ ansible_ssh_user }}"
      groups: docker
      append: yes

  - name: Install Docker Module for Python
    become: yes
    become_method: sudo
    pip:
      name: docker
  
  - name: Download image if not already.
    become: yes
    become_method: sudo
    docker_image:
      name: 'docknetwork/dock-substrate:{{ image_tag }}'
      source: pull
      force_source: yes
      state: present

  - name: Run container for node.
    docker_container:
      name: '{{ container_name }}'
      image: 'docknetwork/dock-substrate:{{ image_tag }}'
      state: started
      detach: yes
      published_ports:
        - 9944:9944
        - 9933:9933
        - 30333:30333
      mounts:
      - source: 'chain-data'
        target: '{{ mount_at }}'
      command: '{{ node_nm }} {{ base_path }} {{ chain }} {{ node_key_cmd }} {{ external_rpc }} {{ validator }} {{ only_reserved }} {{ nodes_reserved }} {{ boot_nodes }} {{ telemetry }}'
  
  # TODO: The session key should be in a local file and not remote
  # Suggestion from Andrew: We should check for presence of session_key.txt and run only if its not present to avoid accidental session key rotation
  - name: Rotate session key
    shell: docker exec -it {{ container_name }} ./scripts/rotate_session_key --nocolor > session_key.txt
    when: rotate_session_key | bool
